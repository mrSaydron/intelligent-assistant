package assistant

import assistant.AssistantConfig.Companion.config
import assistant.model.JsonMessage
import java.util.*
import java.util.logging.Level
import java.util.logging.Logger
import kotlin.system.exitProcess

private val logger = Logger.getLogger("Main")

fun main(args: Array<String>) {
    config = AssistantConfig.load()
    val scanner = Scanner(System.`in`)

    val promptArgs = handleCommandParams(args)

    val prompt = promptArgs.joinToString(" ")
    if (prompt.isBlank()) {
        println("üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É:")
        while (true) {
            print("> ")
//            val userInput = readlnOrNull()?.trim()
            val userInput = scanner.nextLine().trim()
            if (userInput.isEmpty()) return

            val userPrompt = ModelClient.sendUserPrompt(userInput)
            processResponse(userPrompt)
        }
    } else {
        val userPrompt = ModelClient.sendUserPrompt(prompt)
        processResponse(userPrompt)
    }
}

private fun handleCommandParams(args: Array<String>): MutableList<String> {
    val promptArgs = mutableListOf<String>()
    config?.let {
        for (i in args.indices) {
            when (args[i]) {
                "--model" -> {
                    if (i + 1 < args.size) {
                        it.model = args[i + 1]
                        AssistantConfig.save(it)
                    }
                }
                "--log-level" -> {
                    if (i + 1 < args.size) {
                        it.logLevel = args[i + 1].uppercase()
                        AssistantConfig.save(it)
                    }
                }
                "--initial-prompt" -> {
                    if (i + 1 < args.size && !args[i + 1].startsWith("--")) {
                        it.initialPrompt = args[i + 1]
                        AssistantConfig.save(it)
                    } else {
                        it.initialPrompt = AssistantConfig().initialPrompt
                        AssistantConfig.save(it)
                    }
                }
                "--help" -> {
                    printHelp()
                    exitProcess(0)
                }
                "--print-config" -> {
                    printConfig()
                    exitProcess(0)
                }
                else -> if (i == 0 || !args[i - 1].startsWith("--")) promptArgs += args[i]
            }
        }
        configureLogging(Level.parse(it.logLevel))
    }
    return promptArgs
}

fun printHelp() {
    println("""
        ü§ñ Assistant CLI ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞:

        --model <–∏–º—è>             –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: llama3.2, gemma3)
        --log-level <—É—Ä–æ–≤–µ–Ω—å>     –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: DEBUG, INFO, WARNING, ERROR
        --initial-prompt <–ø—Ä–æ–º—Ç>  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –≤ LLM, –æ–±—ä—è—Å–Ω—è—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∏ —Ä–æ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ)
        --help                    –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
        --print-config            –í—ã–≤–µ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    """.trimIndent())
}

fun printConfig() {
    println("""
  model: ${config?.model ?: ""}
  logLevel: ${config?.logLevel ?: ""}
  initialPrompt: 
${config?.initialPrompt ?: ""}
""".trimIndent())
}

fun processResponse(response: JsonMessage) {
    when (response.type) {
        "execute" -> {
            println("‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${response.command}")
            val result = CommandExecutor.execute(response.command!!)
            println("üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n$result")
            val nextResponse = ModelClient.sendExecutionResult(result)
            processResponse(nextResponse)
        }

        "message" -> {
            println("üí¨ –ú–æ–¥–µ–ª—å: ${response.content}")
        }

        else -> {
            logger.warning("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: $response")
        }
    }
}

fun configureLogging(level: Level) {
    val rootLogger = Logger.getLogger("")
    rootLogger.level = level
    rootLogger.handlers.forEach { it.level = level }
}